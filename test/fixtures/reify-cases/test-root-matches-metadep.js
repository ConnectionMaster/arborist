// generated from test/fixtures/test-root-matches-metadep
module.exports = t => {
  const path = t.testdir({
  ".README.md.swp": Buffer.from("", 'base64'),
  "README.md": "When a root node matches a metadep being added to the tree, the\nloop-detection link deduplication made in a lot of problems as a result of\nthe link going to the root node from the /virtual-tree temp tree,\nultimately resulting in the root node being reified in place and deleting\nits existing contents (which is very bad!)\n",
  "do-not-delete-this-file": "",
  "node_modules": {
    ".package-lock.json": JSON.stringify({
      "name": "test-root-matches-metadep",
      "version": "1.0.1",
      "lockfileVersion": 2,
      "requires": true,
      "packages": {}
    }),
    "test-root-matches-metadep": {
      "README.md": "When a root node matches a metadep being added to the tree, the\nloop-detection link deduplication made in a lot of problems as a result of\nthe link going to the root node from the /virtual-tree temp tree,\nultimately resulting in the root node being reified in place and deleting\nits existing contents (which is very bad!)\n",
      "once": {
        "do-not-delete": "this file should not be deleted\n",
        "node_modules": {
          ".package-lock.json": JSON.stringify({
            "name": "wrappy",
            "version": "1.0.2",
            "lockfileVersion": 2,
            "requires": true,
            "packages": {
              "node_modules/once": {
                "version": "1.4.0",
                "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
                "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
                "dependencies": {
                  "wrappy": "1"
                }
              },
              "node_modules/wrappy": {
                "version": "1.0.0",
                "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.0.tgz",
                "integrity": "sha1-iq5PxrTNa+MqRVOYW88ys+4THk4="
              }
            }
          }),
          "once": {
            "LICENSE": "The ISC License\n\nCopyright (c) Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n",
            "README.md": "# once\n\nOnly call a function once.\n\n## usage\n\n```javascript\nvar once = require('once')\n\nfunction load (file, cb) {\n  cb = once(cb)\n  loader.load('file')\n  loader.once('load', cb)\n  loader.once('error', cb)\n}\n```\n\nOr add to the Function.prototype in a responsible way:\n\n```javascript\n// only has to be done once\nrequire('once').proto()\n\nfunction load (file, cb) {\n  cb = cb.once()\n  loader.load('file')\n  loader.once('load', cb)\n  loader.once('error', cb)\n}\n```\n\nIronically, the prototype feature makes this module twice as\ncomplicated as necessary.\n\nTo check whether you function has been called, use `fn.called`. Once the\nfunction is called for the first time the return value of the original\nfunction is saved in `fn.value` and subsequent calls will continue to\nreturn this value.\n\n```javascript\nvar once = require('once')\n\nfunction load (cb) {\n  cb = once(cb)\n  var stream = createStream()\n  stream.once('data', cb)\n  stream.once('end', function () {\n    if (!cb.called) cb(new Error('not found'))\n  })\n}\n```\n\n## `once.strict(func)`\n\nThrow an error if the function is called twice.\n\nSome functions are expected to be called only once. Using `once` for them would\npotentially hide logical errors.\n\nIn the example below, the `greet` function has to call the callback only once:\n\n```javascript\nfunction greet (name, cb) {\n  // return is missing from the if statement\n  // when no name is passed, the callback is called twice\n  if (!name) cb('Hello anonymous')\n  cb('Hello ' + name)\n}\n\nfunction log (msg) {\n  console.log(msg)\n}\n\n// this will print 'Hello anonymous' but the logical error will be missed\ngreet(null, once(msg))\n\n// once.strict will print 'Hello anonymous' and throw an error when the callback will be called the second time\ngreet(null, once.strict(msg))\n```\n",
            "once.js": "var wrappy = require('wrappy')\nmodule.exports = wrappy(once)\nmodule.exports.strict = wrappy(onceStrict)\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n\n  Object.defineProperty(Function.prototype, 'onceStrict', {\n    value: function () {\n      return onceStrict(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var f = function () {\n    if (f.called) return f.value\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  f.called = false\n  return f\n}\n\nfunction onceStrict (fn) {\n  var f = function () {\n    if (f.called)\n      throw new Error(f.onceError)\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  var name = fn.name || 'Function wrapped with `once`'\n  f.onceError = name + \" shouldn't be called more than once\"\n  f.called = false\n  return f\n}\n",
            "package.json": JSON.stringify({
              "name": "once",
              "version": "1.4.0",
              "description": "Run a function exactly one time",
              "main": "once.js",
              "directories": {
                "test": "test"
              },
              "dependencies": {
                "wrappy": "1"
              },
              "devDependencies": {
                "tap": "^7.0.1"
              },
              "scripts": {
                "test": "tap test/*.js"
              },
              "files": [
                "once.js"
              ],
              "repository": {
                "type": "git",
                "url": "git://github.com/isaacs/once"
              },
              "keywords": [
                "once",
                "function",
                "one",
                "single"
              ],
              "author": "Isaac Z. Schlueter <i@izs.me> (http://blog.izs.me/)",
              "license": "ISC"
            })
          },
          "wrappy": {
            "LICENSE": "The ISC License\n\nCopyright (c) Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n",
            "README.md": "# wrappy\n\nCallback wrapping utility\n\n## USAGE\n\n```javascript\nvar wrappy = require(\"wrappy\")\n\n// var wrapper = wrappy(wrapperFunction)\n\n// make sure a cb is called only once\n// See also: http://npm.im/once for this specific use case\nvar once = wrappy(function (cb) {\n  var called = false\n  return function () {\n    if (called) return\n    called = true\n    return cb.apply(this, arguments)\n  }\n})\n\nfunction printBoo () {\n  console.log('boo')\n}\n// has some rando property\nprintBoo.iAmBooPrinter = true\n\nvar onlyPrintOnce = once(printBoo)\n\nonlyPrintOnce() // prints 'boo'\nonlyPrintOnce() // does nothing\n\n// random property is retained!\nassert.equal(onlyPrintOnce.iAmBooPrinter, true)\n```\n",
            "package.json": JSON.stringify({
              "name": "wrappy",
              "version": "1.0.0",
              "description": "Callback wrapping utility",
              "main": "wrappy.js",
              "directories": {
                "test": "test"
              },
              "dependencies": {},
              "devDependencies": {
                "tap": "^0.4.12"
              },
              "scripts": {
                "test": "tap test/*.js"
              },
              "repository": {
                "type": "git",
                "url": "https://github.com/npm/wrappy"
              },
              "author": "Isaac Z. Schlueter <i@izs.me> (http://blog.izs.me/)",
              "license": "ISC",
              "bugs": {
                "url": "https://github.com/npm/wrappy/issues"
              },
              "homepage": "https://github.com/npm/wrappy"
            }),
            "test": {
              "basic.js": "var test = require('tap').test\nvar wrappy = require('../wrappy.js')\n\ntest('basic', function (t) {\n  var once = wrappy(function (cb) {\n    var called = false\n    return function () {\n      if (called) return\n      called = true\n      return cb.apply(this, arguments)\n    }\n  })\n\n  var called = 0\n  function boo () {\n    t.equal(called, 0)\n    called++\n  }\n  // has some rando property\n  boo.iAmBoo = true\n\n  var onlyPrintOnce = once(boo)\n\n  onlyPrintOnce() // prints 'boo'\n  onlyPrintOnce() // does nothing\n  t.equal(called, 1)\n\n  // random property is retained!\n  t.equal(onlyPrintOnce.iAmBoo, true)\n\n  var logs = []\n  var logwrap = wrappy(function (msg, cb) {\n    logs.push(msg + ' wrapping cb')\n    return function () {\n      logs.push(msg + ' before cb')\n      var ret = cb.apply(this, arguments)\n      logs.push(msg + ' after cb')\n    }\n  })\n\n  var c = logwrap('foo', function () {\n    t.same(logs, [ 'foo wrapping cb', 'foo before cb' ])\n  })\n  c()\n  t.same(logs, [ 'foo wrapping cb', 'foo before cb', 'foo after cb' ])\n\n  t.end()\n})\n"
            },
            "wrappy.js": "// Returns a wrapper function that returns a wrapped callback\n// The wrapper function should do some stuff, and return a\n// presumably different callback function.\n// This makes sure that own properties are retained, so that\n// decorations and such are not lost along the way.\nmodule.exports = wrappy\nfunction wrappy (fn, cb) {\n  if (fn && cb) return wrappy(fn)(cb)\n\n  if (typeof fn !== 'function')\n    throw new TypeError('need wrapper function')\n\n  return wrapper\n\n  function wrapper() {\n    var args = new Array(arguments.length)\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n    var ret = fn.apply(this, args)\n    var cb = args[args.length-1]\n    if (typeof ret === 'function' && ret !== cb) {\n      Object.keys(cb).forEach(function (k) {\n        ret[k] = cb[k]\n      })\n    }\n    return ret\n  }\n}\n"
          }
        },
        "package-lock.json": JSON.stringify({
          "name": "wrappy",
          "version": "1.0.2",
          "lockfileVersion": 2,
          "requires": true,
          "packages": {
            "": {
              "name": "wrappy",
              "version": "1.0.2",
              "dependencies": {
                "once": "1.4.0",
                "wrappy": "1.0.0"
              }
            },
            "node_modules/once": {
              "version": "1.4.0",
              "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
              "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
              "dependencies": {
                "wrappy": "1"
              }
            },
            "node_modules/wrappy": {
              "version": "1.0.0",
              "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.0.tgz",
              "integrity": "sha1-iq5PxrTNa+MqRVOYW88ys+4THk4="
            }
          },
          "dependencies": {
            "once": {
              "version": "1.4.0",
              "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
              "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
              "requires": {
                "wrappy": "1"
              }
            },
            "wrappy": {
              "version": "1.0.0",
              "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.0.tgz",
              "integrity": "sha1-iq5PxrTNa+MqRVOYW88ys+4THk4="
            }
          }
        }),
        "package.json": JSON.stringify({
          "name": "wrappy",
          "version": "1.0.2",
          "dependencies": {
            "wrappy": "1.0.0",
            "once": "1.4.0"
          }
        })
      },
      "package.json": JSON.stringify({
        "name": "test-root-matches-metadep",
        "version": "1.0.0",
        "dependencies": {
          "test-root-matches-metadep-x": "1.0.0",
          "test-root-matches-metadep-y": "1.0.0"
        }
      }),
      "x": {
        "package.json": JSON.stringify({
          "name": "test-root-matches-metadep-x",
          "version": "1.0.0",
          "dependencies": {
            "test-root-matches-metadep": "1.0.0"
          }
        })
      },
      "y": {
        "package.json": JSON.stringify({
          "name": "test-root-matches-metadep-y",
          "version": "1.0.0",
          "dependencies": {
            "test-root-matches-metadep": "1.0.1"
          }
        })
      }
    },
    "test-root-matches-metadep-x": {
      "package.json": JSON.stringify({
        "name": "test-root-matches-metadep-x",
        "version": "1.0.0",
        "dependencies": {
          "test-root-matches-metadep": "1.0.0"
        }
      })
    },
    "test-root-matches-metadep-y": {
      "node_modules": {
        "test-root-matches-metadep": t.fixture('symlink', "../../..")
      },
      "package.json": JSON.stringify({
        "name": "test-root-matches-metadep-y",
        "version": "1.0.0",
        "dependencies": {
          "test-root-matches-metadep": "1.0.1"
        }
      })
    }
  },
  "package-lock.json": JSON.stringify({
    "name": "test-root-matches-metadep",
    "version": "1.0.1",
    "lockfileVersion": 2,
    "requires": true,
    "packages": {
      "": {
        "version": "1.0.1",
        "dependencies": {
          "test-root-matches-metadep-x": "1.0.0",
          "test-root-matches-metadep-y": "1.0.0"
        }
      }
    },
    "dependencies": {
      "test-root-matches-metadep": {
        "version": "1.0.0",
        "resolved": "https://registry.npmjs.org/test-root-matches-metadep/-/test-root-matches-metadep-1.0.0.tgz",
        "integrity": "sha512-CCmZ2V2Un12PGmJ3MDreCjA+ql67qoZ8CyJuFiUnTokmRI0CUWy0dB8mXnPMQiWy1oAlf3gAFzGD0TCqSxGXlw==",
        "requires": {
          "test-root-matches-metadep-x": "1.0.0",
          "test-root-matches-metadep-y": "1.0.0"
        }
      },
      "test-root-matches-metadep-x": {
        "version": "1.0.0",
        "resolved": "https://registry.npmjs.org/test-root-matches-metadep-x/-/test-root-matches-metadep-x-1.0.0.tgz",
        "integrity": "sha512-0yH8zQWp/7z6KpX9NZC9K/QvEb6+dZhB8gZ+wZp1ocZ4LpOjHCJn/Y2krIime/2nqofpWjmi2u2a3tdWUHqyhQ==",
        "requires": {
          "test-root-matches-metadep": "1.0.0"
        }
      },
      "test-root-matches-metadep-y": {
        "version": "1.0.0",
        "resolved": "https://registry.npmjs.org/test-root-matches-metadep-y/-/test-root-matches-metadep-y-1.0.0.tgz",
        "integrity": "sha512-+MrEkeqsJyZeEKRapZSMezo7oZJEXz3vUpaZLhHGMbXW3L87G9WsOexGHylSkPOuLhOLnKcYE6fBh8nZLUjtzQ==",
        "requires": {
          "test-root-matches-metadep": "1.0.1"
        }
      }
    }
  }),
  "package.json": JSON.stringify({
    "name": "test-root-matches-metadep",
    "version": "1.0.1",
    "dependencies": {
      "test-root-matches-metadep-x": "1.0.0",
      "test-root-matches-metadep-y": "1.0.0"
    }
  }),
  "x": {
    "package.json": JSON.stringify({
      "name": "test-root-matches-metadep-x",
      "version": "1.0.0",
      "dependencies": {
        "test-root-matches-metadep": "1.0.0"
      }
    })
  },
  "y": {
    "package.json": JSON.stringify({
      "name": "test-root-matches-metadep-y",
      "version": "1.0.0",
      "dependencies": {
        "test-root-matches-metadep": "1.0.1"
      }
    })
  }
})
  const {utimesSync} = require('fs')
  const n = Date.now()
  const {resolve} = require('path')
  
  utimesSync(resolve(path, "node_modules/.package-lock.json"), new Date(n), new Date(n))
  utimesSync(resolve(path, "node_modules/test-root-matches-metadep/once/node_modules/.package-lock.json"), new Date(n), new Date(n))
  return path
}
